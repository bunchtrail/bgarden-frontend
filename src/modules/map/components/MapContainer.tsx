import React, {
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react';
import { SectorType, Specimen } from '../../specimens/types';
import { MapProvider, useMapContext } from '../contexts/MapContext';
import { mapService } from '../services/mapService';
import { specimenService } from '../services/specimenService';
import { MapData, MapMode } from '../types';
import Map from './Map';
import MapControls from './MapControls';

interface MapContainerProps {
  mapId?: number;
  sectorType?: SectorType;
}

const MapContainer: React.FC<MapContainerProps> = ({
  mapId = 1,
  sectorType = SectorType.Dendrology,
}) => {
  const [mapData, setMapData] = useState<MapData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [mapImageUrl, setMapImageUrl] = useState<string>('');
  // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const [viewMode] = useState<'image' | 'interactive'>('image');

  const loadMapMemo = useMemo(
    () => async () => {
      try {
        setLoading(true);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã
        let data: MapData | null = null;

        if (mapId) {
          // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID –∫–∞—Ä—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          data = await mapService.getMapById(mapId);
        } else {
          // –ò–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É
          data = await mapService.getActiveMap();

          // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É —Å ID = 1
          if (!data) {
            data = await mapService.getMapById(1);
          }
        }

        if (data) {
          setMapData(data);
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
          const imageUrl = mapService.getMapImageUrl(data?.filePath || '');
          setMapImageUrl(imageUrl);
        }

        setError(null);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É');
      } finally {
        setLoading(false);
      }
    },
    [mapId]
  );

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadMapMemo();
  }, [loadMapMemo]);

  if (loading) {
    return (
      <div className='map-loading p-8 text-center'>
        <div className='animate-pulse text-lg'>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className='map-error p-8 text-center bg-red-50 border border-red-200 rounded-lg'>
        <div className='text-red-600'>{error}</div>
      </div>
    );
  }

  // –ï—Å–ª–∏ —É –∫–∞—Ä—Ç—ã –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º
  if (mapData && mapImageUrl) {
    return (
      <MapProvider>
        <MapContainerContent
          mapData={mapData}
          mapImageUrl={mapImageUrl}
          viewMode={viewMode}
          mapId={mapId}
          sectorType={sectorType}
        />
      </MapProvider>
    );
  }

  // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç—É Leaflet
  return (
    <MapProvider>
      <div className='map-container-wrapper'>
        <div className='map-header mb-4'>
          <h2 className='text-2xl font-bold'>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞</h2>
          <p className='text-gray-600 mt-2'>
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ Leaflet
          </p>
        </div>

        <div className='leaflet-map-container mb-4'>
          {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Map –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
          <Map mapId={mapId} sectorType={sectorType} />
        </div>
      </div>
    </MapProvider>
  );
};

// –í—ã–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const MapContainerContent: React.FC<{
  mapData: MapData;
  mapImageUrl: string;
  viewMode: 'image' | 'interactive';
  mapId: number;
  sectorType: SectorType;
}> = React.memo(({ mapData, mapImageUrl, viewMode, mapId, sectorType }) => {
  const { setSimpleImageMode, state, setMode, setMap, setMapReady } =
    useMapContext();
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
  const initialModeSetRef = useRef(false);
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è viewMode
  const prevViewModeRef = useRef(viewMode);
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
  const [simpleImageMarker, setSimpleImageMarker] = useState<{
    x: number;
    y: number;
  } | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  const initializeDummyMap = useCallback(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞
    if (state.mapInstance || state.mapReady) {
      console.log(
        'üîÑ MapContainer: —Ñ–∏–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º',
        {
          hasMapInstance: !!state.mapInstance,
          mapReady: state.mapReady,
        }
      );
      return;
    }

    console.log('üîß MapContainer: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã');

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–µ–≤ –∫–∞—Ä—Ç—ã
    const layers = new Set();

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PlantLayer
    const dummyMap = {
      getContainer: () => document.createElement('div'),
      invalidateSize: () => {},
      once: (event: string, callback: () => void) => callback(),
      remove: () => {},
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
      addLayer: (layer: any) => {
        console.log('DummyMap: addLayer –≤—ã–∑–≤–∞–Ω');
        layers.add(layer);

        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—è
        if (layer._events && layer._events.add) {
          layer._events.add.forEach((handler: Function) => {
            try {
              handler({ target: layer });
            } catch (e) {
              console.error(
                '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—è:',
                e
              );
            }
          });
        }

        // –í—ã–∑—ã–≤–∞–µ–º onAdd –µ—Å–ª–∏ —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ (–¥–ª—è L.Control –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
        if (typeof layer.onAdd === 'function') {
          try {
            layer.onAdd(dummyMap);
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ onAdd —Å–ª–æ—è:', e);
          }
        }

        return dummyMap; // –î–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
      },
      removeLayer: (layer: any) => {
        console.log('DummyMap: removeLayer –≤—ã–∑–≤–∞–Ω');
        layers.delete(layer);

        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—è
        if (layer._events && layer._events.remove) {
          layer._events.remove.forEach((handler: Function) => {
            try {
              handler({ target: layer });
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—è:', e);
            }
          });
        }

        // –í—ã–∑—ã–≤–∞–µ–º onRemove –µ—Å–ª–∏ —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (typeof layer.onRemove === 'function') {
          try {
            layer.onRemove(dummyMap);
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ onRemove —Å–ª–æ—è:', e);
          }
        }

        return dummyMap; // –î–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
      },
      // –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –≤—Å–µ —Å–ª–æ–∏
      getLayers: () => Array.from(layers),
      // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å L.marker –∏ –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
      options: {},
      _panes: {
        markerPane: document.createElement('div'),
        overlayPane: document.createElement('div'),
        shadowPane: document.createElement('div'),
        tooltipPane: document.createElement('div'),
        popupPane: document.createElement('div'),
      },
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ addTo –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–∞—Ä–∫–µ—Ä–∞–º –≤—ã–∑—ã–≤–∞—Ç—å myMarker.addTo(map)
      addTo: function (obj: any) {
        console.log('DummyMap: –∫—Ç–æ-—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å addTo –Ω–∞ –∫–∞—Ä—Ç–µ');
        return dummyMap;
      },
    } as unknown as L.Map;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    setMap(dummyMap);

    // –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –∫–∞–∫ –≥–æ—Ç–æ–≤—É—é
    setTimeout(() => {
      console.log('üéØ MapContainer: –æ—Ç–º–µ—á–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –∫–∞–∫ –≥–æ—Ç–æ–≤—É—é');
      setMapReady(true);
    }, 100);
  }, [state.mapInstance, state.mapReady, setMap, setMapReady]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    // –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!initialModeSetRef.current) {
      console.log('üñºÔ∏è MapContainer: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      setSimpleImageMode(true);
      initialModeSetRef.current = true;
    }
  }, [setSimpleImageMode]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ä—Ç—ã
  const handleImageMapClick = (e: React.MouseEvent<HTMLImageElement>) => {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const rect = e.currentTarget.getBoundingClientRect();
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (0-1)
    const relativeX = (e.clientX - rect.left) / rect.width;
    const relativeY = (e.clientY - rect.top) / rect.height;

    console.log(
      `–ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ: x=${relativeX.toFixed(4)}, y=${relativeY.toFixed(4)}`
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    if (state.mode === MapMode.ADD_PLANT) {
      setSimpleImageMarker({ x: relativeX, y: relativeY });

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–∏–∫—Å–µ–ª–µ–π –≤ —É—Å–ª–æ–≤–Ω—ã–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 55-56 –¥–ª—è —à–∏—Ä–æ—Ç—ã –∏ 37-38 –¥–ª—è –¥–æ–ª–≥–æ—Ç—ã, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      const latitude = 55 + relativeY;
      const longitude = 37 + relativeX;

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
      const mapClickEvent = new CustomEvent('map-image-click', {
        detail: {
          latlng: { lat: latitude, lng: longitude },
          relativeCoords: { x: relativeX, y: relativeY },
        },
        bubbles: true,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
      e.currentTarget.dispatchEvent(mapClickEvent);
    }
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–∞—Ä–∫–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    if (state.mode !== MapMode.ADD_PLANT) {
      // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ ADD_PLANT, —Ç–æ –æ—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä
      setSimpleImageMarker(null);
    }
  }, [state.mode]);

  return (
    <div className='map-container-wrapper'>
      <div className='map-header mb-4'>
        <h2 className='text-2xl font-bold'>{mapData.name}</h2>
        <p className='text-gray-600 mt-2'>{mapData.description}</p>
      </div>

      <div className='map-container position-relative mb-6'>
        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º */}
        <div
          className='map-image-container relative rounded-lg overflow-hidden'
          style={{
            width: '100%',
            height: '600px',
            position: 'relative',
            boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
          }}
        >
          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã */}
          <img
            src={mapImageUrl}
            alt={`–ö–∞—Ä—Ç–∞ ${mapData.name}`}
            className='w-full h-full object-contain bg-gray-50'
            style={{ userSelect: 'none' }}
            onClick={handleImageMapClick}
          />

          {/* –ú–∞—Ä–∫–µ—Ä—ã –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ */}
          <SimpleImageMarkers />

          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è */}
          {simpleImageMarker && state.mode === MapMode.ADD_PLANT && (
            <div
              className='absolute w-6 h-6 rounded-full bg-red-500 border-2 border-white transform -translate-x-1/2 -translate-y-1/2 z-10'
              style={{
                left: `${simpleImageMarker.x * 100}%`,
                top: `${simpleImageMarker.y * 100}%`,
                boxShadow: '0 0 0 2px rgba(239, 68, 68, 0.3)',
              }}
            ></div>
          )}

          {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
          {state.mode === MapMode.ADD_PLANT && (
            <div className='absolute bottom-4 left-0 right-0 mx-auto text-center bg-white bg-opacity-80 py-2 px-4 rounded-md shadow-md text-sm max-w-md'>
              –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ, –∫–ª–∏–∫–Ω—É–≤ –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ
            </div>
          )}
        </div>
      </div>

      {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
      <MapControls />
    </div>
  );
});

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã
const SimpleImageMarkers: React.FC = () => {
  const { state } = useMapContext();
  const [specimens, setSpecimens] = useState<Specimen[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π
  useEffect(() => {
    const loadSpecimens = async () => {
      try {
        setLoading(true);
        // getAllSpecimens –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        const data = await specimenService.getAllSpecimens();

        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—Ç–µ`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        // –£ Specimen –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –≤ –æ–±—ä–µ–∫—Ç–µ location
        const validSpecimens = data.filter(
          (s) => s.latitude && s.longitude && !isNaN(s.latitude) && !isNaN(s.longitude)
        );
        
        setSpecimens(validSpecimens);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Ç–µ–Ω–∏–π:', error);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è');
      } finally {
        setLoading(false);
      }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Ç–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∂–∏–º –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω –∏ –∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞
    if (state.isSimpleImageMode && state.mapReady) {
      loadSpecimens();
    }
  }, [state.isSimpleImageMode, state.mapReady, state.selectedSector]);

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∏—á–µ–≥–æ
  if (loading || !specimens.length) {
    return null;
  }

  return (
    <>
      {/* –ú–∞—Ä–∫–µ—Ä—ã —Ä–∞—Å—Ç–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ */}
      {specimens.map((specimen) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É: latitude –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 55-56, longitude –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 37-38
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ –æ–±—ä–µ–∫—Ç–µ specimen
        const relativeX = specimen.longitude - 37;
        const relativeY = specimen.latitude - 55;

        return (
          <div
            key={specimen.id}
            className='absolute w-4 h-4 rounded-full bg-green-500 border border-white transform -translate-x-1/2 -translate-y-1/2 cursor-pointer z-10'
            style={{
              left: `${relativeX * 100}%`,
              top: `${relativeY * 100}%`,
              boxShadow: '0 0 0 2px rgba(16, 185, 129, 0.3)',
            }}
            title={`${specimen.russianName} (${specimen.latinName})`}
            onClick={() => {
              // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
              console.log('–†–∞—Å—Ç–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ:', specimen);
            }}
          >
            {/* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
            <span className='absolute top-0 left-0 right-0 bottom-0 flex items-center justify-center text-white text-[8px] font-bold'>
              {specimen.id}
            </span>
          </div>
        );
      })}
    </>
  );
};

export default MapContainer;
