import React, { useCallback, useEffect, useRef, useState } from 'react';
import { Specimen } from '../../../specimens/types';
import { useMapContext } from '../../contexts/MapContext';
import { useMapService } from '../../hooks';
import PlantMarker from '../markers/PlantMarker';

// –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–ª–∞–¥–∫–∏
const DebugPanel = ({
  onForceLoad,
  specimenCount,
  isLoading,
  isLoaded,
  mapReady,
  hasMapInstance,
}: {
  onForceLoad: () => void;
  specimenCount: number;
  isLoading: boolean;
  isLoaded: boolean;
  mapReady: boolean;
  hasMapInstance: boolean;
}) => (
  <div className='absolute top-4 right-4 bg-white p-3 rounded shadow-md z-[9999] text-xs'>
    <h3 className='font-bold mb-2'>–û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π</h3>
    <div className='mb-2'>
      <p>–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç—ã: {mapReady ? '‚úÖ –ì–æ—Ç–æ–≤–∞' : '‚ùå –ù–µ –≥–æ—Ç–æ–≤–∞'}</p>
      <p>–≠–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä—Ç—ã: {hasMapInstance ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}</p>
      <p>–ó–∞–≥—Ä—É–∑–∫–∞: {isLoading ? 'üîÑ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...' : '‚èπÔ∏è –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è'}</p>
      <p>–£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {isLoaded ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</p>
      <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π: {specimenCount}</p>
    </div>
    <div className='flex justify-center'>
      <button
        onClick={onForceLoad}
        disabled={isLoading}
        className='bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded text-xs disabled:opacity-50'
      >
        {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è'}
      </button>
    </div>
  </div>
);

const PlantLayer: React.FC = () => {
  console.log('PlantLayer –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');

  const { state, setLoading, setError } = useMapContext();
  const { getAllSpecimens } = useMapService();
  const [specimens, setSpecimens] = useState<Specimen[]>([]);
  const isLoadingRef = useRef(false);
  const loadedRef = useRef(false); // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const contextFunctionsRef = useRef({ setLoading, setError });
  const [showDebug, setShowDebug] = useState(true); // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –ø–∞–Ω–µ–ª—å

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–∞—Ä—Ç—ã
  console.log('PlantLayer - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã:', {
    mapReady: state.mapReady,
    hasMapInstance: !!state.mapInstance,
    alreadyLoaded: loadedRef.current,
    isCurrentlyLoading: isLoadingRef.current,
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏,
  // –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä
  useEffect(() => {
    contextFunctionsRef.current = { setLoading, setError };
  }, [setLoading, setError]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑—Ü–æ–≤
  const loadSpecimens = useCallback(async () => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –∏–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
    if (isLoadingRef.current || loadedRef.current) {
      console.log(
        'PlantLayer: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑—Ü–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞ - isLoading:',
        isLoadingRef.current,
        'alreadyLoaded:',
        loadedRef.current
      );
      return;
    }

    const { setLoading, setError } = contextFunctionsRef.current;

    try {
      console.log('PlantLayer: –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π...');
      isLoadingRef.current = true;
      setLoading(true);

      // –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—Ü—ã —Ä–∞—Å—Ç–µ–Ω–∏–π, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä—É
      // –í–ê–ñ–ù–û: –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è getAllSpecimens –∏–∑ useMapService,
      // –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É /Specimen/all
      // –û—à–∏–±–∫–∞ "405 Method Not Allowed" –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏–∑-–∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ /Specimen –±–µ–∑ –ø—É—Ç–∏
      const allSpecimens = await getAllSpecimens();
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allSpecimens.length} –æ–±—Ä–∞–∑—Ü–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π`);

      if (allSpecimens.length > 0) {
        console.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤—ã—Ö 5 –æ–±—Ä–∞–∑—Ü–æ–≤:');
        allSpecimens.slice(0, 5).forEach((specimen: Specimen) => {
          console.log(
            `ID: ${specimen.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${specimen.russianName}, –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [${specimen.latitude}, ${specimen.longitude}]`
          );
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—Ü—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setSpecimens(allSpecimens);
      } else {
        console.warn('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞–∑—Ü–æ–≤');
        setSpecimens([]);
      }

      setError(null);
      // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
      loadedRef.current = true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–∑—Ü–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑—Ü—ã —Ä–∞—Å—Ç–µ–Ω–∏–π');
      setSpecimens([]);
    } finally {
      setLoading(false);
      isLoadingRef.current = false;
    }
  }, [getAllSpecimens]); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç setError –∏ setLoading

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑—Ü–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏)
  const handleForceLoad = useCallback(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ
    loadedRef.current = false;
    loadSpecimens();
  }, [loadSpecimens]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑—Ü–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!state.mapReady || !state.mapInstance || loadedRef.current) {
      console.log(
        'PlantLayer: –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑—Ü–æ–≤ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - mapReady:',
        state.mapReady,
        'mapInstance:',
        !!state.mapInstance,
        'alreadyLoaded:',
        loadedRef.current
      );
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –æ–±—Ä–∞–∑—Ü–æ–≤...');
    loadSpecimens();

    // –ü—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    return () => {
      loadedRef.current = false;
    };
  }, [state.mapReady, state.mapInstance, loadSpecimens]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Alt+D –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏
      if (e.altKey && e.key === 'd') {
        setShowDebug((prev) => !prev);
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
  // –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ä—Ç–µ
  useEffect(() => {
    if (specimens.length > 0) {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
      const withValidCoords = specimens.filter(
        (s) =>
          s.latitude && s.longitude && !isNaN(s.latitude) && !isNaN(s.longitude)
      );

      const withInvalidCoords = specimens.filter(
        (s) =>
          !s.latitude || !s.longitude || isNaN(s.latitude) || isNaN(s.longitude)
      );

      console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—Ä–∞–∑—Ü–æ–≤:');
      console.log(
        `‚úÖ –û–±—Ä–∞–∑—Ü—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${withValidCoords.length}`
      );
      console.log(
        `‚ùå –û–±—Ä–∞–∑—Ü—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${withInvalidCoords.length}`
      );

      if (withValidCoords.length > 0) {
        // –í—ã–≤–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const minLat = Math.min(...withValidCoords.map((s) => s.latitude));
        const maxLat = Math.max(...withValidCoords.map((s) => s.latitude));
        const minLng = Math.min(...withValidCoords.map((s) => s.longitude));
        const maxLng = Math.max(...withValidCoords.map((s) => s.longitude));

        console.log(
          `üìç –î–∏–∞–ø–∞–∑–æ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: —à–∏—Ä–æ—Ç–∞ ${minLat.toFixed(
            6
          )} - ${maxLat.toFixed(6)}, –¥–æ–ª–≥–æ—Ç–∞ ${minLng.toFixed(
            6
          )} - ${maxLng.toFixed(6)}`
        );
      }

      if (withInvalidCoords.length > 0) {
        console.log('‚ùó –ü–µ—Ä–≤—ã–µ 3 –æ–±—Ä–∞–∑—Ü–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:');
        withInvalidCoords.slice(0, 3).forEach((s) => {
          console.log(
            `ID: ${s.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${
              s.russianName || s.latinName
            }, –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [${s.latitude}, ${s.longitude}]`
          );
        });
      }
    }
  }, [specimens]);

  // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞, –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º
  if (!state.mapReady || !state.mapInstance) {
    console.log(
      'PlantLayer: –ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä—Ç—ã, –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º'
    );
    return null;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ
  console.log(
    'PlantLayer: –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å',
    specimens.length,
    '–æ–±—Ä–∞–∑—Ü–∞–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π'
  );

  return (
    <>
      {showDebug && (
        <DebugPanel
          onForceLoad={handleForceLoad}
          specimenCount={specimens.length}
          isLoading={isLoadingRef.current}
          isLoaded={loadedRef.current}
          mapReady={state.mapReady}
          hasMapInstance={!!state.mapInstance}
        />
      )}

      {specimens.length > 0 ? (
        <>
          {/* –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ø–µ—Ü–∏–º–µ–Ω –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ */}
          {console.log(`–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ ${specimens.length} –º–∞—Ä–∫–µ—Ä–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π`)}

          {specimens.map((specimen) => {
            console.log(
              `–°–æ–∑–¥–∞—é –º–∞—Ä–∫–µ—Ä –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è ${specimen.id} (${
                specimen.russianName || specimen.latinName
              })`
            );
            return <PlantMarker key={specimen.id} specimen={specimen} />;
          })}
        </>
      ) : !isLoadingRef.current && loadedRef.current ? (
        <div className='absolute top-10 right-10 bg-white p-3 rounded shadow-md z-[1000]'>
          <p className='text-gray-700'>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π</p>
        </div>
      ) : null}
    </>
  );
};

export default React.memo(PlantLayer); // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ React.memo –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
