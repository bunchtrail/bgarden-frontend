import axios from 'axios';
import { SectorType, Specimen } from '../../specimens/types';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:7254/api';

// –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ API_URL
console.log('specimenService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å API_URL:', API_URL);

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ
 */
export const specimenService = {
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ ID –∫–∞—Ä—Ç—ã
   * @param mapId ID –∫–∞—Ä—Ç—ã
   */
  getSpecimensByMapId: async (mapId: number): Promise<Specimen[]> => {
    try {
      console.log(`–í—ã–∑–æ–≤ GET ${API_URL}/Map/${mapId}/specimens`);
      const response = await axios.get(`${API_URL}/Map/${mapId}/specimens`);
      return response.data || [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π:', error);
      return [];
    }
  },
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É —Å–µ–∫—Ç–æ—Ä–∞
   * @param sectorType –¢–∏–ø —Å–µ–∫—Ç–æ—Ä–∞
   */
  getSpecimensBySectorType: async (sectorType: SectorType): Promise<Specimen[]> => {
    try {
      console.log(`–í—ã–∑–æ–≤ GET ${API_URL}/Specimen/sector/${sectorType}`);
      const response = await axios.get(`${API_URL}/Specimen/sector/${sectorType}`);
      return response.data || [];
    } catch (error: any) {
      // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª 404, –∑–Ω–∞—á–∏—Ç –≤ —Å–µ–∫—Ç–æ—Ä–µ –Ω–µ—Ç –æ–±—Ä–∞–∑—Ü–æ–≤ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      if (error.response && error.response.status === 404) {
        console.log(`–í —Å–µ–∫—Ç–æ—Ä–µ ${sectorType} –Ω–µ—Ç –æ–±—Ä–∞–∑—Ü–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π`);
        return [];
      }

      // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞ ${sectorType}:`, error);
      return [];
    }
  },
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Ä–∞—Å—Ç–µ–Ω–∏–π
   */
  getAllSpecimens: async (): Promise<Specimen[]> => {
    try {
      const url = `${API_URL}/Specimen/all`;
      console.log(`üîç specimenService.getAllSpecimens: –ó–∞–ø—É—Å–∫–∞—é –∑–∞–ø—Ä–æ—Å GET ${url}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API
      const response = await axios.get(url, {
        headers: {
          'Accept': 'text/plain'
        }
      });
      
      console.log(`‚úÖ specimenService.getAllSpecimens: –ü–æ–ª—É—á–µ–Ω–æ ${response.data ? response.data.length : 0} –æ–±—Ä–∞–∑—Ü–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π`);
      if (response.data && response.data.length > 0) {
        console.log('‚úÖ specimenService.getAllSpecimens: –ü–µ—Ä–≤—ã–µ 2 –æ–±—Ä–∞–∑—Ü–∞:', 
          JSON.stringify(response.data.slice(0, 2), null, 2));
      } else {
        console.warn('‚ö†Ô∏è specimenService.getAllSpecimens: API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞–∑—Ü–æ–≤');
      }
      
      return response.data || [];
    } catch (error: any) {
      if (error.response && error.response.status === 404) {
        console.log('‚ùå specimenService.getAllSpecimens: API –≤–µ—Ä–Ω—É–ª 404 - –æ–±—Ä–∞–∑—Ü—ã —Ä–∞—Å—Ç–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        return [];
      }
      
      console.error('‚ùå specimenService.getAllSpecimens: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π:', error);
      if (error.response) {
        console.error(`‚ùå specimenService.getAllSpecimens: –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.response.status}, —Å–æ–æ–±—â–µ–Ω–∏–µ: ${error.response.statusText}`);
        console.error('‚ùå specimenService.getAllSpecimens: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
      } else if (error.request) {
        console.error('‚ùå specimenService.getAllSpecimens: –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω', error.request);
      } else {
        console.error('‚ùå specimenService.getAllSpecimens: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      }
      
      // –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç—É–ø –∫ API —á–µ—Ä–µ–∑ fetch
      try {
        console.log('üîÑ specimenService.getAllSpecimens: –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ fetch');
        const response = await fetch(`${API_URL}/Specimen/all`, {
          headers: {
            'Accept': 'text/plain'
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          console.log(`‚úÖ specimenService.getAllSpecimens: –ß–µ—Ä–µ–∑ fetch –ø–æ–ª—É—á–µ–Ω–æ ${data ? data.length : 0} –æ–±—Ä–∞–∑—Ü–æ–≤`);
          return data;
        } else {
          console.error(`‚ùå specimenService.getAllSpecimens: fetch —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è. –°—Ç–∞—Ç—É—Å: ${response.status}`);
        }
      } catch (fetchError) {
        console.error('‚ùå specimenService.getAllSpecimens: –û—à–∏–±–∫–∞ –∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ fetch:', fetchError);
      }
      
      // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
      console.log(`‚öôÔ∏è –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ: 
curl -X 'GET' '${API_URL}/Specimen/all' -H 'accept: text/plain'`);
      
      return [];
    }
  },
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—Ç–µ–Ω–∏—è
   */
  createSpecimen: async (specimen: Omit<Specimen, 'id'>): Promise<Specimen> => {
    try {
      const specimenData = {
        id: 0, // API –æ–∂–∏–¥–∞–µ—Ç id=0 –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
        ...specimen
      };
      
      const response = await axios.post(`${API_URL}/Specimen`, specimenData);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–∑—Ü–∞:', error);
      throw error;
    }
  },
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—Ç–µ–Ω–∏—è
   */
  updateSpecimen: async (id: number, specimen: Specimen): Promise<Specimen> => {
    try {
      const response = await axios.put(`${API_URL}/Specimen/${id}`, {
        ...specimen,
        id
      });
      return response.data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–∑—Ü–∞ —Å ID ${id}:`, error);
      throw error;
    }
  },
  
  /**
   * –£–¥–∞–ª—è–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—Ç–µ–Ω–∏—è
   */
  deleteSpecimen: async (id: number): Promise<boolean> => {
    try {
      const response = await axios.delete(`${API_URL}/Specimen/${id}`);
      return response.status === 204;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–∑—Ü–∞ —Å ID ${id}:`, error);
      throw error;
    }
  }
};

export default specimenService;
